#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#include "../zmk-nodefree-config/helper.h"
#include "../zmk-nodefree-config/keypos_def/keypos_34keys.h"

#include "combos.dtsi"  // requires layer aliases
// #include "mouse.dtsi"
// #include "extra_keys.h"

/*                              34 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────────╮ 30  31 │ 32  33 ╭───────────╯ ╰───────────╮ LH1 LH0 │ RH0 RH1 ╭───────────╯
              ╰────────┴────────╯                         ╰─────────┴─────────╯             */


#define ___ &trans
#define XXX &none

#define DEF 0
#define SYM 1
#define NAV 2
#define NUM 3

#define VOICE   &kp C_VOICE_COMMAND   // short for mac dictation key (to fit into keymap section)
#define VOL_UP  &kp C_VOL_UP          // short for mac volume up
#define VOL_DN  &kp C_VOL_DN          // short for mac volume down

/* custom behaviors */

// homerow mods
ZMK_BEHAVIOR(hrm, hold_tap,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <125>;
    bindings = <&kp>, <&kp>;
)

// tap: sticky shift | double tap: capsword
ZMK_BEHAVIOR(ss_cw, tap_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;
)

// combos
#undef COMBO_TERM
#define COMBO_TERM 40  // timeout of 40ms (default is 30ms if omitted)
ZMK_COMBO(ent, &kp ENTER, 22 23, ALL, 25) // C+D = Enter, active on all layers
ZMK_COMBO(bak, &kp BSPC, 26 27, ALL, 25) // P+, = Backspace, active on all layers

/* Global settings */

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

// behaviors {
// 		        num_word: behavior_num_word {
// 			compatible = "zmk,behavior-caps-word";
// 			label = "NUM_WORD";
// 			#binding-cells = <0>;
//                      layers = <NUM>;                                // insert location of numbers layer here
// 			continue-list = <BACKSPACE DELETE DOT COMMA>;                    // adjust as desired
//                      ignore-numbers;                                // numbers don't deactivate the layer
// 		};
//	};
// };


/* Caps-word, num-word and smart-mouse */

// ME: I want to change hold to layer NAV instead of shift. This is urob's implentation for reference.
// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift 
// ZMK_MOD_MORPH(smart_shft,
//     bindings = <&sk LSHFT>, <&caps_word>;
//     mods = <(MOD_LSFT)>;
// )
// &caps_word {  // mods deactivate caps-word, requires PR #1451
//     /delete-property/ ignore-modifiers;
// };

// ME: tap: sticky-shift | shift + tap/double-tap: caps-word | hold: NAV layer
#define SMART_SHFT &smart_shft NAV 0
ZMK_HOLD_TAP(smart_shft,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&shft_dance>;
)
ZMK_TAP_DANCE(shft_dance,
    tapping-term-ms = <200>;
    bindings = <&sk LSHFT>, <&caps_word>;  
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

// tap: num-word | double-tap: sticky num-layer | hold: num-layer
#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};

/* Custom behaviors */

// Sticky layer + sticky shift (workaround for issue #1421)
ZMK_STICKY_KEY(sls,
    release-after-ms = <1000>;
    bindings = <&uc_shift>;
    ignore-modifiers;
)

// reuse basic mod-morph scheme
#define SIMPLE_MORPH(NAME, MOD, BINDING1, BINDING2) \
    ZMK_MOD_MORPH(NAME, \
        mods = <(MOD_L ## MOD|MOD_R ## MOD)>; \
        bindings = <BINDING1>, <BINDING2>; \
    )

// tap: comma | shift + tap: semicolon | ctrl + shift + tap: <
SIMPLE_MORPH(comma_morph, SFT, &kp COMMA, &comma_inner_morph)
SIMPLE_MORPH(comma_inner_morph, CTL, &kp SEMICOLON, &kp LESS_THAN)

// tap: dot | shift + tap: colon | ctrl + shift + tap: >
SIMPLE_MORPH(dot_morph, SFT, &kp DOT, &dot_inner_morph)
SIMPLE_MORPH(dot_inner_morph, CTL, &kp COLON, &kp GREATER_THAN)

// tap: qmark | shift + tap: excl
SIMPLE_MORPH(qexcl, SFT, &kp QMARK, &kp EXCL)

// tap: space | shift + tap: dot -> space -> sticky shift | hold: activate layer
ZMK_HOLD_TAP(lt_spc,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&spc_morph>;
)

SIMPLE_MORPH(spc_morph, SFT, &kp SPACE, &dot_spc)
ZMK_MACRO(dot_spc,
    wait-ms = <0>;
    tap-ms = <5>;
    bindings = <&kp DOT &kp SPACE &sk LSHFT>;
)

/* Keymap */

ZMK_LAYER(default_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp Q         &kp W         &kp M         &kp B         &kp Z             &kp J         &kp F         &kp O         &kp U         &qexcl
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &hrm LCTRL N  &hml LALT R   &hml LGUI S  &hml LSHFT T   &kp G             &kp Y         &hmr RSHFT H  &hmr LGUI E   &hmr LALT I   &hmr LCTRL A
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp X         &kp L         &kp C         &kp D         &kp V             &kp K         &kp P         &comma_morph  &dot_morph    &kp SQT
     // ╰─────────────────────────────────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────────────────────────────────╯
                                                    &smart_shft   SMART_NUM         SMART_NUM     &lt_spc SYM 0
     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(sym_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp ESC       &kp LS(N3)    &kp LS(N4)    &kp LS(N5)    &kp LS(N7)        ___           VOL_DN        &kp MUTE      VOL_UP        ___ 
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp TAB       &kp LS(N2)    &kp LS(N9)    &kp LS(N0)    &kp LS(N8)        &kp LA(N6)    &kp PREV      &kp C_PP      &kp NEXT      ___
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     ___               &kp LA(N7)    &kp SLASH     VOICE         &kp MINUS     ___ 
     // ╰─────────────────────────────────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────────────────────────────────╯
                                                    ___           ___               ___           ___
     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(nav_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          &kp LG(TAB)   &kp LG(GRAVE)  ___          ___           ___               &kp CAPSLOCK  &kp HOME      &kp UP        &kp END       ___ 
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LCTRL     &kp LALT      &kp LGUI      &kp LSHFT     ___               ___           &kp LEFT      &kp DOWN      &kp RIGHT     &kp DEL
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          ___           &kp LC(N1)    &kp LC(N2)    &kp LC(N3)    ___               ___           &kp PG_DN     &kp PG_UP      ___          &key_repeat
     // ╰─────────────────────────────────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────────────────────────────────╯
                                                    ___           ___               ___           ___
     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)

ZMK_LAYER(num_layer,
     // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
          ___           ___           ___           ___           ___               &kp KP_MULTIPLY  &kp KP_N7  &kp KP_N8     &kp KP_N9     &kp KP_PLUS
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LCTRL     &kp LALT      &kp LGUI      &kp LSHFT     &kp KP_DOT        &kp KP_SLASH  &kp KP_N4     &kp KP_N5     &kp KP_N6     &kp KP_MINUS
     // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp LC(LG(L)) &kp LC(LG(N1)) &kp LC(LG(N2)) &kp LC(LG(N5)) &kp LC(LG(I))     &kp KP_EQUAL  &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_N0
     // ╰─────────────────────────────────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────────────────────────────────╯
                                                    ___           ___               ___           ___
     //                                           ╰─────────────┴─────────────╯   ╰─────────────┴─────────────╯
)
